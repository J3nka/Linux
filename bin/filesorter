#!/usr/bin/perl -w

package filesorter::handler;

use Moose;
use namespace::autoclean;
use Mediainfo;
use Image::Info qw(image_info dim);
use Data::Dumper;
use Term::ANSIColor;
use Log::Log4perl ':easy';

has ['filepath', 'dir']                                                                                                   => ( is => 'rw', isa => 'Str', required => 1 );
has ['inpath', 'orgfile', 'newfile', 'title', 'date', 'bitrate', 'duration', 'filetype']                                  => ( is => 'rw', isa => 'Str' );
has ['actor', 'source', 'story', 'errors', 'available_actors']                                                            => ( is => 'rw', isa => 'ArrayRef', default => sub {[]} );
has 'mediainfo'                                                                                                           => ( is => 'rw', isa => 'Mediainfo', default => sub {Mediainfo->new(filename => shift->filepath)}, lazy => 1 );
has 'resolution'                                                                                                          => ( is => 'rw', isa => 'Int' );
has ['duplicate', 'commit', 'list', 'dump', 'delete', 'onlyrename', 'overwrite', 'keepboth', 'forcemediainfo', 'convert'] => ( is => 'rw', isa => 'Bool' );
has ['filter', 'custom_data']                                                                                             => ( is => 'rw', isa => 'HashRef' );
has 'logger'                                                                                                              => ( is => 'rw', isa => 'Log::Log4perl::Logger', default => sub {Log::Log4perl->easy_init($INFO); get_logger()} );

sub run {
    my ($self, %args) = @_;

    return unless $self->get_source;
    return unless $self->get_filetype;
    return unless $self->get_story;
    return unless $self->get_quality;
    return unless $self->get_date;
    return unless $self->get_actors;

    return 2 if !$self->check_filter;

    return unless $self->set_custom_data;
    return unless $self->build_newfile;
    return unless $self->build_movepath;
    if ($self->list) {
        print $self->filepath . "\n";
        return 1;
    }
    elsif ($self->dump) {
        print Dumper $self;
        return 1;
    }
    elsif ($self->delete) {
        if ($self->commit) {
            print colored("Deleting " . $self->filepath . "\n", "red");
            unlink $self->filepath;
            system sprintf("find $self->inpath -empty -delete");
        }
        else {
            print colored("Would delete " . $self->filepath . "\n", "yellow");
        }
        return 1;
    }

    return unless $self->move_clean;

    return 1;
}

sub check_filter {
    my $self = shift;

    foreach my $param (keys %{$self->filter}) {
        if (scalar @{$self->filter->{$param}} > 0) {
            if ($self->$param) {
                @{$self->filter->{$param}} = split(",",join(",",@{$self->filter->{$param}}));
                my $regex = join("|",@{$self->filter->{$param}});
                if (ref $self->$param eq "ARRAY") {
                    return unless grep { /$regex/i } @{$self->$param};
                }
                elsif ($param eq "Resolution" && $regex =~ /^(\d+)p?$/) {
                    return unless $self->$param == $1;
                }
                elsif ($regex =~ /^([<=>]+)(\d+)p?$/) {
                    return unless eval "$self->$param $1 $2";
                }
                else {
                    return unless $self->$param =~ /$regex/i;
                }
            }
        }
    }

    return 1;
}

sub get_filetype {
    my $self = shift;

    if ((lc $self->newfile) =~ /\.(\w+)$/) {
        $self->filetype((lc $self->newfile) =~ /\.(\w+)$/);
        $self->newfile($self->newfile =~ s/\.\w+$//r);
    }
    else {
        push @{$self->errors}, "Filetype: No filetype found";
        return;
    }

    $self->filetype("mp4") if $self->convert;

    return 1;
}

sub get_source {
    my $self = shift;

    push @{$self->source}, $self->orgfile =~ /\[([^\[\]]+)\]/g;
    $self->newfile($self->newfile =~ s/\[[^\[\]]+\]//igr);

    return 1;
}

sub get_story {
    my $self = shift;

    push @{$self->story}, $self->newfile =~ /\{([^{}]+)\}/g;
    $self->newfile($self->newfile =~ s/\{([^{}]+)\}//gr);

    return 1;
}

sub get_quality {
    my ($self, %args) = @_;

    if (!$self->duplicate && !$args{forcemediainfo} && $self->newfile =~ /(\W|^)(\d{3,4})p(\W|$)/i) {
        $self->resolution($2);
    }
    elsif (!$self->duration || !$self->resolution || !$self->bitrate) {
        my $mf = eval {local *STDERR; open(STDERR, '>', 'NUL'); image_info($self->filepath)};
        if ($mf && !$mf->{error} && $mf->{file_media_type} =~ /image/) {
            $self->resolution($mf->{height});
        }
        elsif ($self->mediainfo->{have_video}) {
            $self->resolution($self->mediainfo->{height});
            if ($self->mediainfo->{video_length} && $self->mediainfo->{video_bitrate}) {
                $self->bitrate(sprintf("%.2f Mbit/s", $self->mediainfo->{video_bitrate} / 1000000));
                $self->duration(sprintf("%dm %ds", $self->mediainfo->{video_length} / 60000, $self->mediainfo->{video_length} / 1000 % 60));
            }
        }
        else {
            push @{$self->errors}, "Failed to get mediainfo";
            return;
        }
    }
    if (!$self->duplicate) {
        $self->newfile($self->newfile =~ s/(\W|^)(\d{3,4})p(\W|$)/$1$3/gir);
    }

    return 1;
}

sub get_date {
    my $self = shift;

    if ($self->newfile =~ /(^|\W)(\d{4}|\d{2})\D(\d{2})\D(\d{2})($|\W)/) {
        my ($year, $month, $day) = ($2,$3,$4);
        if (length $year == 2) {
            $year = "20".$year;
        }
        if (($year > `date +%Y` ) || ($month < 01 || $month > 12) || ($day < 01 || $day > 31)) {
            return 1;
        }
        $self->date("$year $month $day");
        $self->newfile($self->newfile =~ s/(^|\W)((?:\d{4}|\d{2})\D\d{2}\D\d{2})($|\W)/$1$3/gr);
    }

    return 1;
}

sub get_actors {
    my $self = shift;

    foreach my $actor (@{$self->available_actors}, $self->newfile =~ /\(([^()]+)\)/g) {
        next unless $self->newfile =~ /(\W|^)$actor(\W|$)/i;
        $actor =~ s/([\w']+)/\u\L$1/g unless split(" ", $actor) == 1 && $actor =~ /[A-Z]/;
        push @{$self->actor}, $actor unless grep { $_ eq $actor } @{$self->actor};
        $self->newfile($self->newfile =~ s/(\W|^)$actor(\W|$)/$1$2/igr);
    }
    $self->newfile($self->newfile =~ s/\(|\)//gr);

    return 1;
}

sub set_custom_data {
    my $self = shift;

    foreach my $attribute (("actor","source","story")) {
        s/^\s+|\s+$//g for @{$self->$attribute};
        foreach my $delete (@{$self->custom_data->{delete}->{$attribute}}) {
            /^$delete$/i and undef $_ for @{$self->$attribute};
        }
        @{$self->$attribute} = grep {defined $_} @{$self->$attribute};

        foreach my $replacement (keys %{$self->custom_data->{replace}->{$attribute}}) {
            s/^$replacement$/$self->custom_data->{replace}->{$attribute}->{$replacement}/ie for @{$self->$attribute};
        }

        @{$self->custom_data->{add}->{$attribute}} = split(",",join(",",@{$self->custom_data->{add}->{$attribute}}));

        if ($self->custom_data->{add}->{"static".$attribute}) {
            @{$self->$attribute} = @{$self->custom_data->{add}{$attribute}};
        }
        elsif ($self->custom_data->{add}->{"last".$attribute}) {
            push @{$self->$attribute}, @{$self->custom_data->{add}->{$attribute}};
        }
        else {
            unshift @{$self->$attribute}, @{$self->custom_data->{add}->{$attribute}};
        }

        @{$self->$attribute} = do { my %seen; grep {!$seen{$_}++} @{$self->$attribute}};
        s/^\s+|\s+$//g for @{$self->$attribute};
    }

    return 1;
}

sub build_newfile {
    my $self = shift;

    $self->newfile($self->newfile =~ s/^\s+|\s+$//gr);
    $self->newfile($self->newfile =~ s/\s{2,}/ /gr);
    $self->title($self->newfile =~ s/([\w']+)/\u\L$1/gr) if !$self->duplicate;

    my @filename;
    push @filename, join("",map { "[$_]" } @{$self->source}) if scalar @{$self->source};
    push @filename, join(" ",map { "($_)" } sort @{$self->actor}) if scalar @{$self->actor};
    push @filename, join(" ",map { "{$_}" } @{$self->story}) if scalar @{$self->story};
    push @filename, $self->title if $self->title;
    if ($self->duplicate) {
        push @filename, $self->duplicate;
        $self->duplicate++;
    }
    push @filename, $self->date if $self->date;
    push @filename, $self->resolution? $self->resolution."p" : ();

    $self->newfile(sprintf("%s.%s", join(" ", @filename), $self->filetype // ""));

    return 1;
}

sub build_movepath {
    my $self = shift;

    return 1 if $self->onlyrename;

    my @movepath;
    push @movepath, $self->dir;
    push @movepath, scalar @{$self->source}? @{$self->source} : "Other";
    push @movepath, ("#Actors",join(" & ", sort @{$self->actor})) if scalar @{$self->actor};
    push @movepath, @{$self->story};
    $self->dir(join("/",@movepath));

    return 1;
}

sub build_newpath {
    my $self = shift;

    return join("/", $self->dir, $self->newfile);
}

sub move_clean {
    my $self = shift;

    if (! scalar @{$self->errors}) {
        return 1 if $self->filepath eq $self->build_newpath;

        if ($self->keepboth) {
            $self->duplicate = 1;
            $self->build_newfile until ! -f $self->build_newpath;
        }

        my $input_output = {
            input => {
                path => $self->filepath,
                color => 'default',
            },
            output => {
                path => $self->build_newpath,
                color => 'default',
            },
        };

        if (! -f $self->build_newpath || $self->overwrite) {
            if ($self->commit) {
                system(sprintf('mkdir -p -m 700 "%s"', $self->dir)) if ! -e $self->dir;
                if ($self->convert) {
                    system(sprintf('ffmpeg -i "%s" -c:v libx264 -c:a copy "%s"', $self->filepath, $self->build_newpath));
                }
                else {
                    system sprintf("chmod 600 \"%s\"", $self->filepath);
                    system sprintf("mv \"%s\" \"%s\"", $self->filepath, $self->build_newpath);
                }
            }

            $input_output->{input}->{color} = "red";
            $input_output->{output}->{color} = "green";
        }
        elsif ($self->removeduplicate) {
            if ($self->commit) {
                print "Removing input file\n";
                unlink $self->filepath;
            }
            $input_output->{input}->{color} = "red";
            $input_output->{output}->{color} = "green";
        }
        else {
            my $oldfile = $self->new(
                filepath  => $self->build_newpath,
                dir       => $self->dir,
                duplicate => 1,
                newfile   => $self->newfile,
            );
            $self->duplicate = 1;
            return unless get_quality($oldfile);
            return unless get_quality($self);

            push @{$self->error}, sprintf("Duplicate: %s", "No active solution");
            foreach my $attribute ("resolution","bitrate","duration") {
                push @{$self->error}, sprintf("%-10s(existing/new): %s/%s",ucfirst $attribute,$oldfile->$attribute // "",$self->$attribute // "");
            }
            push @{$self->error}, "--overwrite        Move new and overwrite existing";
            push @{$self->error}, "--removeduplicate  Delete new";
            push @{$self->error}, "--keepboth         Add an incrementing number to the end of output file";
        }
        printf("%-6s: \"%s\"\n",ucfirst $_, colored($input_output->{$_}->{path}, $input_output->{$_}->{color})) for sort keys %$input_output;
        print "\n";
        system sprintf("find \"%s\" -empty -delete", $self->inpath) if $self->commit;
    }

    return 1;
}

__PACKAGE__->meta->make_immutable;

1;

package main;

use strict;
use Data::Dumper;
use Getopt::Long;
use Term::ANSIColor;

my %options;
$|++;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;

Getopt::Long::GetOptions(
    "help"            => \&help,

    "commit"          => \$options{commit},

    "list"            => \$options{list},
    "dump"            => \$options{dump},
    "delete"          => \$options{delete},

    "dir=s"           => \$options{dir},
    "forcemediainfo"  => \$options{forcemediainfo},
    "cleantitle"      => \$options{cleantitle},
    "onlyrename"      => \$options{onlyrename},
    "convert=s"       => \@{$options{convert}},
    "debug"           => \$options{debug},

    "overwrite"       => \$options{overwrite},
    "removeduplicate" => \$options{removeduplicate},
    "keepboth"        => \$options{keepboth},

    "replaceactor=s"  => \%{$options{custom}{replace}{actor}},
    "replacesource=s" => \%{$options{custom}{replace}{source}},
    "replacestory=s"  => \%{$options{custom}{replace}{story}},

    "deleteactor=s"   => \@{$options{custom}{delete}{actor}},
    "deletesource=s"  => \@{$options{custom}{delete}{source}},
    "deletestory=s"   => \@{$options{custom}{delete}{story}},

    "addactor=s"      => \@{$options{custom}{add}{actor}},
    "addsource=s"     => \@{$options{custom}{add}{source}},
    "addstory=s"      => \@{$options{custom}{add}{story}},

    "lastactor"       => \$options{custom}{add}{lastactor},
    "lastsource"      => \$options{custom}{add}{lastsource},
    "laststory"       => \$options{custom}{add}{laststroy},

    "staticactor"     => \$options{custom}{add}{staticactor},
    "staticsource"    => \$options{custom}{add}{staticsource},
    "staticstory"     => \$options{custom}{add}{staticstory},

    "actor=s"         => \@{$options{filter}{actor}},
    "source=s"        => \@{$options{filter}{source}},
    "story=s"         => \@{$options{filter}{story}},
    "title=s"         => \@{$options{filter}{title}},
    "resolution=s"    => \@{$options{filter}{Resolution}},
    "filetype=s"      => \@{$options{filter}{filetype}},
    "date=s"          => \@{$options{filter}{date}},
) or help();

my @LIST = find_files(@ARGV);
my $available_actors = get_available_actors(@LIST);

while (my ($index, $file) = each @LIST) {
    #printf("%-25s => %d/%d (%.2f%%)\n", $file->orgfile, $index+1, scalar @LIST, ($index+1)*100/scalar @LIST);
    $file->available_actors($available_actors);
    next if scalar @{$file->errors};
    my $status = $file->run;
    if ($status && $status == 2) {
        undef $LIST[$index];
    }
}

@LIST = grep { defined } @LIST;

foreach my $file (grep {scalar @{$_->errors} && $_->duplicate} @LIST) {
        printf("Existing: \"%s\"\n",colored($file->dir."/".$file->newfile, ($file->overwrite?"red":$file->removeduplicate?"green":"reset")));
        printf("New:      \"%s\"\n",colored($file->filepath, ($file->overwrite?"green":$file->removeduplicate?"red":"reset")));
        printf("%s\n", colored("Errors:", "magenta"));
        print join("\n",@{$file->errors})."\n\n";
}

foreach my $file (grep {scalar @{$_->errors} && !$_->duplicate} @LIST) {
    printf("Input:  \"%s\"\n%s\n%s\n\n",
        $file->filepath,
        colored("Errors:", "magenta"),
        join("\n",@{$file->errors})
    );
}

if ($options{commit}) {
    print colored("Moved files and cleaned old folders\n","green");
    system sprintf("find \"%s\" -empty -delete", $_) for @ARGV;
}
else {
    print colored("No changes made\n","yellow");
}

sub find_files {
    my @args = @_ or help();
    my @LIST;

    foreach my $arg (@args) {
        chomp(my @filepaths = `find "$arg" -type f`);
        foreach my $file (@filepaths) {
            my @filesplit = split("/",$file);
            my $newfile = my $orgfile = pop @filesplit;
            $newfile =~ s/´|`|’/'/g;
            $newfile =~ s/([^\{\(\[\]\)\}\w'@&]|_)(?!\w+$)/ /g if $options{cleantitle};
            $newfile =~ s/\s+/ /g;
            $newfile =~ s/^\s+|\s+$//g;
            my $convert = grep {$newfile =~ /\.$_/i} @{$options{convert}};
            $file = filesorter::handler->new(
                commit         => $options{commit},
                convert        => $convert,
                custom_data    => $options{custom},
                delete         => $options{delete},
                dir            => $options{onlyrename}? join("/", @filesplit) : $options{dir} || $arg,
                dump           => $options{dump},
                filepath       => $file,
                filter         => $options{filter},
                forcemediainfo => $options{forcemediainfo},
                inpath         => join("/", @filesplit),
                keepboth       => $options{keepboth},
                list           => $options{list},
                newfile        => $newfile,
                onlyrename     => $options{onlyrename},
                orgfile        => $orgfile,
                overwrite      => $options{overwrite},
            );
            my @left_parenths = $file->newfile =~ /(\(|\{|\[)/g;
            my @right_parenths = $file->newfile =~ /(\)|\}|\])/g;
            if (@left_parenths != @right_parenths) {
                push @{$file->errors}, "Uneven number of parethesis, brackets, or curly brackets";
            }
        }
        push @LIST, @filepaths;
    }

    @LIST = sort { $a->orgfile cmp $b->orgfile } @LIST;

    return @LIST;
}

sub get_available_actors {
    my @LIST = @_;
    my $actors = [];

    foreach my $file (@LIST) {
        my @file_actors = $file->newfile =~ /\(([^()]+)\)/g;
        foreach my $actor (@file_actors) {
            next unless split(" ", $actor) > 1;
            push @$actors, $actor if !grep {$_ eq $actor} @$actors
        }
    }

    return $actors;
}

sub help {
exit print "Usage: $0 <input folder 1> <input folder 2> <...> <options>
    --help              Print this helptext

    --commit            Move files and clean input directories

    --list              List files instead of renaming and moving. Works with filters
    --dump              Same as list but Dumper instead
    --delete            Delete found files, works with filters

    --dir               Set a custom output directory(default is same as input)
    --forcemediainfo    Force extraction of mediainfo even if resolution exists in filename
    --onlyrename        Don't move files, just rename them
    --cleantitle        Removes -|_|,|.|! from file title
    --debug             Enable debugging

    --overwrite         Move files even on duplicate
    --removeduplicate   If a file already exists with new filename, delete instead of move(be careful)
    --keepboth          Adds an incrementing number at end of file to keep both

Data manipulation on attributes actor, source and story.
Available methods are \"replace,delete,add,last,static\"
Use like \"--methodattribute\" ex: \"--addactor nameofactor\"
\@ means that you can specify the option multiple times. You can also separate values with \",\"
\% means that the option requires a key and a value like \"key=value\"

    replace             \%Replace attribute \"oldattribute=newattribute\"
    delete              \@Delete attribute from file
    add                 \@Add attribute to files, will still add attributes from filename
    last                Add added attributes last instead of first
    static              Replace all attributes with the ones specified with addmethod

Filters:
    --actor             \@Filter by actor
    --source            \@Filter by source
    --story             \@Filter by story
    --title             \@Filter by title
    --resolution        \@Filter by quality <=> works as well. ex: <1080 for resolutions under 1080p
    --filetype          \@Filter by filetype
    --date              \@Filter by date
";
}