#!/usr/local/bin/python3.7

import requests
import json
from bs4 import BeautifulSoup
import re
import time
import os
import sys
import subprocess
import signal

if len(sys.argv) == 1 or "--help" in sys.argv:
  print("Script to download animes from HorribleSubs")
  print("Usage: %s <animename>" % sys.argv[0])
  sys.exit(0)

searchhash = {}

def signal_handler(sig, frame):
        print('\nAborting script!')
        sys.exit(0)
signal.signal(signal.SIGINT, signal_handler)

def search(anime):
  response = requests.post("https://horriblesubs.info/shows/")
  soup = BeautifulSoup(response.content.decode(),'html.parser')
  print ("="*40)
  count = 0;
  for row in soup.find_all("div", class_="ind-show"):
    link = BeautifulSoup(row.decode(),'html.parser').find("a")
    if re.match(".*"+anime+".*",link["title"], re.I):
      count += 1
      searchhash[count] = link["href"]
      print ("[%s]: %s" % (count,link["title"]))
  if count == 0:sys.exit("No anime found!")
  print ("="*40)

def id(anime):
  response = requests.post("https://horriblesubs.info"+searchhash[int(anime)])
  soup = BeautifulSoup(response.content.decode(),'html.parser')
  for row in soup.find_all("script"):
    text = BeautifulSoup(row.decode(),'html.parser').get_text()
    match = re.match(".*var hs_showid = (\d+).*",text)
    if match: return match.group(1)

def episodes(anime):
    episodehash = {}
    i = 0
    response = requests.post("https://horriblesubs.info/api.php?method=getshows&type=batch&showid="+anime)
    while True:
        if i == 0:b = "B"
        else: b= ""
        if response.content.decode() == "DONE":break
        soup = BeautifulSoup(response.content.decode(),'html.parser')
        for div in soup.find_all("div",class_="rls-info-container"):
            episode = b+re.sub("^0*","",div.get("id"))
            episodehash[episode] = {}
            for link in div.find_all("div",class_="rls-link"):
                if link.find("a",{"title":"Magnet Link"}):
                    episodehash[episode][re.sub("\d+-|p","",link.get("id"))] = link.find("a",{"title":"Magnet Link"}).get("href")
        response = requests.post("https://horriblesubs.info/api.php?method=getshows&type=show&showid="+anime+"&nextid="+str(i))
        i += 1
    temp = [k for k in episodehash.keys()]
    episodehash = {k:episodehash[k] for k in reversed(temp)}
    print("Available episodes: ")
    print ("="*40)
    for episode,quality in episodehash.items():
        print(str(episode)+": "+str("p, ".join([str(i) for i in quality.keys()]))+"p")
    print ("="*40)
    return episodehash

def episodeparser(episodelist):
  array = episodelist.split(",")
  if array[0] == "":
    for row in [row for row in episodehash.keys() if re.match("B",row)]:del episodehash[row]
    array[0] = str(list(episodehash.keys())[0]) + "-" + str(list(episodehash.keys())[-1])
  episodes = []
  for row in array:
    if re.match("B\d*-\d*",row):
      episodes.append(row)
      continue
    elif re.match("\d*-\d*",row):
      (x,y) = row.split("-")
      if not x:x = list(episodehash.keys())[0]
      if not y:y = list(episodehash.keys())[-1]
    else:x = y = row
    if int(x) > int(y) or x not in episodehash.keys() or y not in episodehash.keys():sys.exit("Invalid episode range or episode doesn't exist: "+row)
    for i in range(int(x),int(y)+1):
      if str(i) in episodehash.keys() and str(i) not in episodes:episodes.append(str(i))
  return episodes

def qualityparser(episodes,quality):
  if quality != "":quality = quality.replace("p","")
  qualities = {}
  for i in episodes:
    if len(episodehash[i]) == 0:
        pass
    elif quality == "":
      qualities[i] = {}
      qualities[i][list(episodehash[i].keys())[-1]] = episodehash[i][list(episodehash[i].keys())[-1]]
    elif quality in episodehash[i].keys():
      qualities[i] = {}
      qualities[i][quality] = episodehash[i][quality]
    else:pass
  return qualities

def download(confirm,quality):
  if confirm.lower() != "yes":sys.exit("Exiting!")
  move = subprocess.check_output(["deluge-console","config","move_completed"]).strip().decode().split(": ")[1].lower()
  if move == "true":subprocess.run(["deluge-console","config","-s","move_completed","false"],stdout=subprocess.DEVNULL)
  array = ["deluge-console","add"]
  for key,value in quality.items():
    array.append(list(value.values())[0])
  subprocess.run(array)
  if move == "true":subprocess.run(["deluge-console","config","-s","move_completed","true"],stdout=subprocess.DEVNULL)

search(' '.join(sys.argv[1:]))
episodehash = episodes(id(input("Which anime do you want to download?[1] ") or 1))
episodelist = input("Which episodes do you want?(comma separated list)\nx-y: all episodes betweeen and including x to y\nx-: all episodes after and including x\n-y: all episodes until including y\n[All except batches]: ")
episodes = episodeparser(episodelist)

print ("="*40)
quality = input("Which quality do you want?[Best possible]: ")
print("Matches:")
quality = qualityparser(episodes,quality)
print ("="*40)
for key,value in quality.items():
  print (key+": "+str(list(quality[key].keys())[0])+"p")
print ("="*40)

confirm = input("Do you want to download these files?(yes/no)[yes]: ") or "yes"
download(confirm,quality)
sys.exit("DONE!")
