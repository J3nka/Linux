#!/usr/bin/perl -w

use strict;
use Data::Dumper;
use Getopt::Long;
use Cwd 'abs_path';
use Term::ANSIColor;

my %options = (
    home => $ENV{HOME},
);

GetOptions(
    \%options,
    "home=s",
    "full",
    "install",
    "uninstall",
    "exclude=s",
    "include=s",
    "help",
);

help() if $options{help};

foreach my $path (@ARGV) {
    chomp(my @config_files = `find "$path" -type f`);

    foreach my $file (@config_files) {
        $file =~ s/$path\/+//;
        my $link_path;
        if ($file =~ /^home/) {
            $link_path = $file =~ s/^home/$options{home}/r;
        }
        else {
            next if !$options{full};
            $link_path = "/$file";
        }
        $file = "$path/$file";
        $file = abs_path($file);

        if ($options{include} && $file !~ /$options{include}/) {
            print colored("$file not matching include, skipping\n", "yellow");
            next;
        }
        if ($options{exclude} && $file =~ /$options{exclude}/) {
            print colored("$file matching exclude, skipping\n", "yellow");
            next;
        }

        my $sudo = $link_path =~ /^$ENV{HOME}/ ? "" : "sudo ";

        if ($options{install}) {
            if (! -f $link_path) {
                print "$link_path does not exist or is pointing incorrectly, do you want to create symlink anyway? [Y/N]: ";
                chomp(my $answer = <STDIN>);
                next unless $answer =~ /^y(es)?$/i;
            }
            elsif(-l $link_path && $file eq readlink($link_path)) {
                _print($link_path, colored("=>", "cyan"), $file, "green");
                next;
            }

            my $command = sprintf('%sln -s "%s" "%s"', $sudo, $file, $link_path);
            run($sudo, $command, colored("=>", "cyan"), $file, $link_path);
        }
        elsif ($options{uninstall}) {
            my $command = sprintf('%scp "%s" "%s"', $sudo, $file, $link_path);
            run($sudo, $command, "!=", $file, $link_path);
        }
        else {
            if (-l $link_path && ! -e $link_path) {
                _print($link_path, colored("=>", "cyan"), "", "red");
            }
            elsif(-l $link_path && $file eq readlink($link_path)) {
                _print($link_path, colored("=>", "cyan"), $file, "green");
            }
            elsif(-l $link_path && $file ne readlink($link_path)) {
                _print($link_path, colored("!=>", "cyan"), $file, "red");
            }
            elsif (-e $link_path) {
                _print($link_path, "!=", $file, "green");
            }
            else {
                _print($link_path, colored("X", "red"), "", "green");
            }
        }
    }
}

sub delete_file {
    my ($sudo, $file) = @_;

    system(sprintf('%srm "%s"', $sudo, $file));

    return 1;
}

sub run {
    my ($sudo, $command, $delimiter, $file, $link_path ) = @_;

    return unless delete_file($sudo, $link_path);
    my $color = system($command) ? "red" : "green";
    _print($link_path, $delimiter, $file, $color);

    return 1;
}

sub _print {
    my ($link_path, $delimiter, $file, $color) = @_;

    printf("%s %s %s\n", colored($link_path, $color), $delimiter, colored($file, $color));

    return 1;
}

sub help {
    exit print "Usage: $0 [options] <input_folders>
    --home      Which home to use
    --full      Skip files outside home or not
    --install   Create symlinks to input_folders based on folder structure
    --uninstall Reset symlinks to normal files. Copies from input folder.
    --exclude   Exclude files matching regex
    --include   Include files matching regex
"
}
