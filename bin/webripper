#!/usr/local/bin/python3.7

import requests
import json
from bs4 import BeautifulSoup
import re
import time
import os
import sys
import subprocess
import signal
from optparse import OptionParser
import threading

def signal_handler(sig, frame):
    print('\nAborting script!')
    sys.exit(0)
signal.signal(signal.SIGINT, signal_handler)

def search(source):
    searchdict = {}
    with open(source) as f:
        url = f.readline()
        while url:
            if re.search("\.m3u8", url):
                searchdict[url.strip()] = {"dir": None, "filename": None}
                lasturl = url.strip()
            elif re.match("\s+", url):
                (key, value) = url.strip().split("=")
                searchdict[lasturl][key] = value
            else:
                searchdict[url.strip()] = []
            url = f.readline()
    return searchdict

def get_media_url(url):
    mediaurls = []
    response = requests.post(url, headers={"user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36"})
    soup = BeautifulSoup(response.content.decode(),'html.parser')
    for row in soup.find_all("video"):
        if "src" in row:
            mediaurls.append(row["src"])
        for source in row.find_all("source") or []:
            if source["src"]:
                mediaurls.append(source["src"])
    iframe = soup.find("iframe")
    if iframe and re.search("gounlimited",iframe["src"]):
        searchdict[iframe["src"]] = get_media_url(iframe["src"])

    return mediaurls

def download_media(searchdict):
    for url in searchdict:
        if re.search("\.m3u8", url):
            searchdict[url]["dir"] = searchdict[url]["dir"] or options.dir or "."
            searchdict[url]["filename"] = searchdict[url]["filename"] or input("Save file(" + url + "): ")
            searchdict[url]["filepath"] = searchdict[url]["dir"][0] + "/" + searchdict[url]["filename"][0]
            searchdict[url]["url"] = url
            thread = myThread(searchdict[url])
            thread.start()

        else:
            for media in searchdict[url]:
                r = requests.get(media, headers={'referer': url, "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36"})
                if not r: continue
                filename = media.split("/")[-1].split("?")[0]
                filename = input("Save file as[" + filename + "](" + url + "): ") or filename
                filepath = (options.dir or ".") + "/" + filename
                open(filepath,"wb").write(r.content)
                print("Download Complete(%s/%s): %s" % (searchdict[url].index(media)+1,len(searchdict[url]),filepath))

class myThread (threading.Thread):
   def __init__(self, url):
      threading.Thread.__init__(self)
      self.url = url

   def run(self):
        subprocess.run(["ffmpeg","-i",self.url["url"],"-c","copy",self.url["filepath"]], stdout=subprocess.DEVNULL)
        print("Download Complete: %s" % (self.url["filepath"]))

usage = "Usage: %prog [options] args"
parser = OptionParser(usage)
parser.add_option("--source", dest="source", help="A file containing urls to download from")
parser.add_option("--dir", dest="dir", help="Where to download files")
(options, args) = parser.parse_args()

if options.source == None:
    print("Missing source file")
    sys.exit(parser.print_help())

searchdict = search(options.source)
for url in searchdict:
    print("Getting media urls: %s" % (url))
    if not re.search("\.m3u8", url):
        searchdict[url] = get_media_url(url)
download_media(searchdict)

sys.exit("DONE!")
