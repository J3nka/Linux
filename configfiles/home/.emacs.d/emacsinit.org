Emacs init file in org mode
* Iinit
    #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (tool-bar-mode 1)
    (fset 'yes-or-no-p 'y-or-n-p)
    (global-set-key (kbd "<f5>") 'revert-buffer)
    (setq make-backup-files nil)
    #+END_SRC
* Which Key
  Help for key combinations
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
  #+END_SRC
* Reveal.js
  Reveal.js for presentations
  #+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
  :ensure t)

  (setq org-reveal-root "http://cdn.jsdeliver.net/npm/reveal.js/")
  (setq org-reveal-mathjax t)

  (use-package htmlize
     :ensure t)
  #+END_SRC
* Evil Mode
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/evil")
  (require 'evil)
  (evil-mode 1)
  #+END_SRC
* Indenting
    #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 4)
    (setq indent-line-function 'insert-tab)
    #+END_SRC
* Line Numbers
  #+begin_src emacs-lisp
  (global-linum-mode)
  #+end_src
* Rest
    #+BEGIN_SRC emacs-lisp
    (require 'org-tempo)
    (use-package org-bullets
        :ensure t
        :config
        (add-hook 'org-mode-hook(lambda () (org-bullets-mode 1 ))))

    (use-package saveplace
        :init (save-place-mode))


    (use-package smartparens
    :ensure t
    :config
    (smartparens-global-mode 1))

    (custom-set-variables
        '(ediff-diff-options "-w")
        '(ediff-split-window-function (quote split-window-horizontally))
        '(ediff-window-setup-function (quote ediff-setup-windows-plain)))

(setq indo-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
(defalias 'list-buffers 'ibuffer)

(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    ))

(use-package counsel
  :ensure t
  )

(use-package swiper
  :ensure t
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))

(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
  ))

#+END_SRC
